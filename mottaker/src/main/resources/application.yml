server:
  port: 8090

cron:
  startSendBrukerBeskjed: 0 25 18 16 DEC ?

management:
  endpoint:
    health:
      show-details: always
  endpoints.web:
      exposure:
        include: info, health, metrics, prometheus
      base-path: "/internal"
  metrics:
    export:
      prometheus:
        enabled: true
    web:
      server:
        request:
          autotime:
            enabled: true

---
spring:
  config:
    activate:
      on-profile: prod | dev

userNotificationMessageJson: ${userNotificationMessage}

service:
  dryRun: ${ENABLE_SERVICE_DRYRUN}

restconfig:
  username: ${INNSENDING_USERNAME}
  password: ${INNSENDING_PASSWORD}

kafkaconfig:
  namespace: ${NAIS_NAMESPACE}
  secure: ${KAFKA_SECURITY}
  schemaRegistryUsername: ${KAFKA_SCHEMA_REGISTRY_USER}
  schemaRegistryPassword: ${KAFKA_SCHEMA_REGISTRY_PASSWORD}
  schemaRegistryUrl: ${KAFKA_SCHEMA_REGISTRY}
  kafkaBrokers: ${KAFKA_BROKERS}
  truststorePath: ${KAFKA_TRUSTSTORE_PATH}
  keystorePath: ${KAFKA_KEYSTORE_PATH}
  credstorePassword: ${KAFKA_CREDSTORE_PASSWORD}

  mainTopic: ${KAFKA_MAIN_TOPIC}
  metricsTopic: ${KAFKA_METRICS_TOPIC}
  brukernotifikasjonDoneTopic: ${KAFKA_BRUKERNOTIFIKASJON_DONE_TOPIC}
  brukernotifikasjonBeskjedTopic: ${KAFKA_BRUKERNOTIFIKASJON_BESKJED_TOPIC}
  brukernotifikasjonOppgaveTopic: ${KAFKA_BRUKERNOTIFIKASJON_OPPGAVE_TOPIC}

no.nav.security.jwt:
  issuer:
    azure:
      discoveryurl: ${AZURE_APP_WELL_KNOWN_URL}
      #https://soknad-oauth2-mock.dev.nav.no/default/.well-known/openid-configuration
      accepted_audience: ${AZURE_APP_CLIENT_ID}

---
spring:
  config:
    activate:
      on-profile: docker

restconfig:
  username: ${INNSENDING_USERNAME}
  password: ${INNSENDING_PASSWORD}

kafkaconfig:
  namespace: ${NAIS_NAMESPACE}
  secure: ${KAFKA_SECURITY}
  schemaRegistryUsername: ${KAFKA_SCHEMA_REGISTRY_USER}
  schemaRegistryPassword: ${KAFKA_SCHEMA_REGISTRY_PASSWORD}
  schemaRegistryUrl: ${KAFKA_SCHEMA_REGISTRY}
  kafkaBrokers: ${KAFKA_BROKERS}
  truststorePath: ${KAFKA_TRUSTSTORE_PATH}
  keystorePath: ${KAFKA_KEYSTORE_PATH}
  credstorePassword: ${KAFKA_CREDSTORE_PASSWORD}

  mainTopic: ${KAFKA_MAIN_TOPIC:privat-soknadinnsending-v1-dev}
  metricsTopic: ${KAFKA_METRICS_TOPIC:privat-soknadinnsending-metrics-v1-dev}
  brukernotifikasjonDoneTopic: ${KAFKA_BRUKERNOTIFIKASJON_DONE_TOPIC:min-side.aapen-brukernotifikasjon-done-v1}
  brukernotifikasjonBeskjedTopic: ${KAFKA_BRUKERNOTIFIKASJON_BESKJED_TOPIC:min-side.aapen-brukernotifikasjon-beskjed-v1}
  brukernotifikasjonOppgaveTopic: ${KAFKA_BRUKERNOTIFIKASJON_OPPGAVE_TOPIC:min-side.aapen-brukernotifikasjon-oppgave-v1}

---
spring:
  config:
    activate:
      on-profile: default | test

restconfig:
  username: innsending
  password: password

kafkaconfig:
  namespace: default
  secure: FALSE
  schemaRegistryUsername: user
  schemaRegistryPassword: pass
  schemaRegistryUrl: http://localhost:8081
  kafkaBrokers: localhost:29092
  truststorePath: path
  keystorePath: path
  credstorePassword: pass

  mainTopic: ${KAFKA_MAIN_TOPIC:privat-soknadinnsending-v1-dev}
  metricsTopic: ${KAFKA_METRICS_TOPIC:privat-soknadinnsending-metrics-v1-dev}
  brukernotifikasjonDoneTopic: ${KAFKA_BRUKERNOTIFIKASJON_DONE_TOPIC:min-side.aapen-brukernotifikasjon-done-v1}
  brukernotifikasjonBeskjedTopic: ${KAFKA_BRUKERNOTIFIKASJON_BESKJED_TOPIC:min-side.aapen-brukernotifikasjon-beskjed-v1}
  brukernotifikasjonOppgaveTopic: ${KAFKA_BRUKERNOTIFIKASJON_OPPGAVE_TOPIC:min-side.aapen-brukernotifikasjon-oppgave-v1}
